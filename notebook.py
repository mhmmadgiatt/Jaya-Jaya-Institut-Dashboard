# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MdQI2Iq8YpeSmKhZPi6eQxjI3Ze2nKOK

# Final Project: Menyelesaikan Permasalahan Institusi Pendidikan
- **Nama:** Muhammad Giat
- **Email:** mhmmadgiat@gmail.com
- **ID Dicoding:** mhmmadgiatt

### Tujuan Proyek:
Memahami pola dan karakteristik mahasiswa berdasarkan berbagai atribut untuk memprediksi status mereka, seperti lulus, dropout, atau aktif.

## Persiapan

### Menyiapkan library yang dibutuhkan
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import joblib

"""### Menyiapkan data yang akan diguankan"""

# Load dataset
df = pd.read_csv("dataset/dataset.csv", delimiter=";")
df.head(10)

df.shape

"""## Data Understanding

### Dataset: Students' Performance

| Nama Kolom | Deskripsi|
|---|---|
| Marital status | Status perkawinan mahasiswa. (Kategorikal) |
| Application mode | Metode pendaftaran yang digunakan mahasiswa. (Kategorikal) |
| Application order | Urutan pilihan program studi yang diajukan mahasiswa. (Numerik) |
| Course | Program studi yang diambil mahasiswa. (Kategorikal) |
| Daytime/evening attendance | Apakah mahasiswa mengikuti perkuliahan siang atau malam. (Kategorikal) |
| Previous qualification | Kualifikasi tertinggi yang diperoleh sebelum mendaftar kuliah. (Kategorikal) |
| Previous qualification (grade) | Nilai yang diperoleh pada kualifikasi sebelumnya. (Numerik) |
| Nationality | Kewarganegaraan mahasiswa. (Kategorikal) |
| Mother's qualification | Kualifikasi tertinggi ibu mahasiswa. (Kategorikal) |
| Father's qualification | Kualifikasi tertinggi ayah mahasiswa. (Kategorikal) |
| Mother's occupation | Pekerjaan ibu mahasiswa. (Kategorikal) |
| Father's occupation | Pekerjaan ayah mahasiswa. (Kategorikal) |
| Admission grade | Nilai masuk mahasiswa. (Numerik) |
| Displaced | Apakah mahasiswa merupakan pengungsi. (Kategorikal) |
| Educational special needs | Apakah mahasiswa memiliki kebutuhan pendidikan khusus. (Kategorikal) |
| Debtor | Apakah mahasiswa merupakan debitur. (Kategorikal) |
| Tuition fees up to date | Apakah SPP mahasiswa telah terbayarkan. (Kategorikal) |
| Gender | Jenis kelamin mahasiswa. (Kategorikal) |
| Scholarship holder | Apakah mahasiswa merupakan penerima beasiswa. (Kategorikal) |
| Age at enrollment | Usia mahasiswa saat mendaftar kuliah. (Numerik) |
| International | Apakah mahasiswa merupakan mahasiswa internasional. (Kategorikal) |
| Curricular units 1st sem (credited) | Jumlah mata kuliah yang mendapatkan kredit pada semester pertama. (Numerik) |
| Curricular units 1st sem (enrolled) | Jumlah mata kuliah yang diambil pada semester pertama. (Numerik) |
| Curricular units 1st sem (evaluations) | Jumlah mata kuliah yang dievaluasi pada semester pertama. (Numerik) |
| Curricular units 1st sem (approved) | Jumlah mata kuliah yang lulus pada semester pertama. (Numerik) |

**Keterangan:**

* **Kategorikal:** Data yang berupa kategori atau label, seperti jenis kelamin, status perkawinan, atau program studi.
* **Numerik:** Data yang berupa angka, seperti usia, nilai, atau jumlah mata kuliah.

#### Eksplorasi Awal

- Dimensi Dataset: Melihat jumlah baris dan kolom.
- Informasi Dataset: Menampilkan tipe data untuk setiap kolom.
- Statistik Deskriptif: Meringkas data numerik.
- Data Duplikasi dan Missing Values: Memastikan kualitas data.
"""

# Menampilkan informasi dataset
print("Informasi Dataset:")
print(df.info())

# Menampilkan statistik deskriptif
print("\nStatistik Deskriptif Dataset:")
print(df.describe())

# Melihat jumlah missing values
missing_values = df.isnull().sum()
print("\nJumlah Missing Values per Kolom:")
print(missing_values)

# Melihat duplikasi data
print("\nJumlah Duplikasi Data:")
print(df.duplicated().sum())

# Melihat unique value pada dataset
print("\nUnique Value per Kolom:")
print(df.nunique())

categorical_columns = df.select_dtypes(include=['object']).columns

for column in categorical_columns:
    unique_values = df[column].unique()
    print(f"{column}: \n {unique_values}", '\n')

"""## Data Preparation / Preprocessing
1.  Pembersihan Data:
- Mengganti kode numerik dengan label deskriptif.
- Menyesuaikan nilai kategori untuk kolom seperti Marital Status, Gender, dll.
2. Ekspor Data:
- Data yang telah dibersihkan disimpan dalam format CSV untuk keperluan lebih lanjut.
"""

df = df.copy()

# Replace numerical codes with descriptive labels
df['Marital_status'] = df['Marital_status'].replace({
    1: 'single',
    2: 'married',
    3: 'widower',
    4: 'divorced',
    5: 'facto union',
    6: 'legally separated'
})

df['Daytime_evening_attendance'] = df['Daytime_evening_attendance'].replace({
    1: 'daytime',
    0: 'evening'
})

df['Displaced'] = df['Displaced'].replace({
    1: 'yes',
    0: 'no'
})

df['Educational_special_needs'] = df['Educational_special_needs'].replace({
    1: 'yes',
    0: 'no'
})

df['Debtor'] = df['Debtor'].replace({
    1: 'yes',
    0: 'no'
})

df['Tuition_fees_up_to_date'] = df['Tuition_fees_up_to_date'].replace({
    1: 'yes',
    0: 'no'
})

df['Gender'] = df['Gender'].replace({
    1: 'male',
    0: 'female'
})

df['International'] = df['International'].replace({
    1: 'yes',
    0: 'no'
})

df['Scholarship_holder'] = df['Scholarship_holder'].replace({
    1: 'yes',
    0: 'no'
})

# Map occupation codes to descriptive labels
occupation_mapping = {
    0: 'Student',
    1: 'Legislative/executive bodies, directors, managers',
    2: 'Intellectual and scientific specialists',
    3: 'Intermediate level technicians',
    4: 'Administrative staff',
    5: 'Service and sales workers',
    6: 'Skilled agricultural, forestry, and fishery workers',
    7: 'Skilled industry, construction workers',
    8: 'Machine operators, assemblers',
    9: 'Unskilled workers',
    10: 'Armed forces professions',
    90: 'Other situations',
    99: 'Blank',
    101: 'Armed forces officers',
    102: 'Armed forces sergeants',
    103: 'Other armed forces personnel',
    112: 'Service and commercial directors',
    114: 'Hotel, catering, and other services directors',
    121: 'Science and engineering professionals',
    122: 'Health professionals',
    123: 'Teachers',
    124: 'Finance and administrative specialists',
    125: 'ICT specialists',
    131: 'Technicians in science and engineering',
    132: 'Health technicians',
    134: 'Legal and cultural services technicians',
    135: 'ICT technicians',
    141: 'Administrative support staff',
    143: 'Data, finance, and registry operators',
    151: 'Personal service workers',
    152: 'Sales workers',
    154: 'Protection and security workers',
    161: 'Skilled farmers and agricultural workers',
    171: 'Construction and skilled trades workers',
    174: 'Electrical and electronic workers',
    175: 'Food, clothing, and craft workers',
    181: 'Machine operators',
    183: 'Drivers and mobile equipment operators',
    194: 'Meal preparation assistants',
    195: 'Street vendors and service providers'
}

df['Mothers_occupation'] = df['Mothers_occupation'].map(occupation_mapping)
df['Fathers_occupation'] = df['Fathers_occupation'].map(occupation_mapping)

# Map nationality codes to descriptive labels
nationality_mapping = {
    1: 'Portuguese',
    2: 'German',
    6: 'Spanish',
    11: 'Italian',
    13: 'Dutch',
    14: 'English',
    17: 'Lithuanian',
    21: 'Angolan',
    22: 'Cape Verdean',
    24: 'Guinean',
    25: 'Mozambican',
    26: 'Santomean',
    32: 'Turkish',
    41: 'Brazilian',
    62: 'Romanian',
    100: 'Moldovan',
    101: 'Mexican',
    103: 'Ukrainian',
    105: 'Russian',
    108: 'Cuban',
    109: 'Colombian'
}

df['Nacionality'] = df['Nacionality'].map(nationality_mapping)

# Map course codes to descriptive labels
course_mapping = {
    33: 'Biofuel Production Technologies',
    171: 'Animation and Multimedia Design',
    8014: 'Social Service (evening attendance)',
    9003: 'Agronomy',
    9070: 'Communication Design',
    9085: 'Veterinary Nursing',
    9119: 'Informatics Engineering',
    9130: 'Equinculture',
    9147: 'Management',
    9238: 'Social Service',
    9254: 'Tourism',
    9500: 'Nursing',
    9556: 'Oral Hygiene',
    9670: 'Advertising and Marketing Management',
    9773: 'Journalism and Communication',
    9853: 'Basic Education',
    9991: 'Management (evening attendance)'
}

df['Course'] = df['Course'].map(course_mapping)

# Map application mode codes to descriptive labels
application_mode_mapping = {
    1: '1st phase - general contingent',
    2: 'Ordinance No. 612/93',
    5: '1st phase - special contingent (Azores Island)',
    7: 'Holders of other higher courses',
    10: 'Ordinance No. 854-B/99',
    15: 'International student (bachelor)',
    16: '1st phase - special contingent (Madeira Island)',
    17: '2nd phase - general contingent',
    18: '3rd phase - general contingent',
    26: 'Ordinance No. 533-A/99, item b2) (Different Plan)',
    27: 'Ordinance No. 533-A/99, item b3 (Other Institution)',
    39: 'Over 23 years old',
    42: 'Transfer',
    43: 'Change of course',
    44: 'Technological specialization diploma holders',
    51: 'Change of institution/course',
    53: 'Short cycle diploma holders',
    57: 'Change of institution/course (International)'
}

df['Application_mode'] = df['Application_mode'].map(application_mode_mapping)

df.to_csv('dataset/processed_data.csv', index=False)

"""## EDA
Melakukan analisis visual untuk menemukan pola data:
- Distribusi mahasiswa berdasarkan:
    - Status perkawinan, mode aplikasi, program studi, gender, usia, dll.
- Hubungan nilai penerimaan dengan usia saat pendaftaran.
- Korelasi antara jumlah mata kuliah dan nilai.

Setiap analisis visual menggunakan histogram, scatter plot, atau heatmap untuk menyampaikan informasi dengan jelas.
"""

# 1. Distribusi mahasiswa berdasarkan status pernikahan
fig1 = px.histogram(df, x='Marital_status', title='Distribusi Mahasiswa Berdasarkan Status Pernikahan')
fig1.show()

# 2. Distribusi mahasiswa berdasarkan mode aplikasi
fig2 = px.histogram(df, x='Application_mode', title='Distribusi Mahasiswa Berdasarkan Mode Aplikasi')
fig2.show()

# 3. Distribusi mahasiswa berdasarkan program studi
fig3 = px.histogram(df, x='Course', title='Distribusi Mahasiswa Berdasarkan Program Studi')
fig3.update_xaxes(categoryorder='total descending')
fig3.show()

# 4. Distribusi mahasiswa berdasarkan gender
fig4 = px.histogram(df, x='Gender', title='Distribusi Mahasiswa Berdasarkan Gender')
fig4.show()

# 5. Distribusi mahasiswa berdasarkan usia saat pendaftaran
fig5 = px.histogram(df, x='Age_at_enrollment', nbins=10, title='Distribusi Mahasiswa Berdasarkan Usia Saat Pendaftaran')
fig5.show()

# 6. Distribusi mahasiswa berdasarkan status penerima beasiswa
fig6 = px.histogram(df, x='Scholarship_holder', title='Distribusi Mahasiswa Berdasarkan Status Penerima Beasiswa')
fig6.show()

# 7. Distribusi mahasiswa berdasarkan status pembayaran biaya kuliah
fig7 = px.histogram(df, x='Tuition_fees_up_to_date', title='Distribusi Mahasiswa Berdasarkan Status Pembayaran Biaya Kuliah')
fig7.show()

# 8. Distribusi mahasiswa berdasarkan status mahasiswa (lulus, dropout, dll.)
fig8 = px.histogram(df, x='Status', title='Distribusi Mahasiswa Berdasarkan Status Mahasiswa')
fig8.show()

# 9. Distribusi mahasiswa berdasarkan kewarganegaraan
fig9 = px.pie(df, names='Nacionality', title='Distribusi Mahasiswa Berdasarkan Kewarganegaraan',
              width=800, height=600, hole=0.3)

# Menambahkan label persentase
fig9.update_traces(textposition='inside', textinfo='percent+label')

# Mengatur tata letak
fig9.update_layout(
    title_text='Distribusi Mahasiswa Berdasarkan Kewarganegaraan',
    title_x=0.5,
    showlegend=True
)

fig9.show()

# 10. Hubungan antara nilai penerimaan dengan usia saat pendaftaran
fig10 = px.scatter(df, x='Age_at_enrollment', y='Admission_grade', title='Hubungan Nilai Penerimaan dengan Usia Saat Pendaftaran')
fig10.show()

# 11. Distribusi mahasiswa berdasarkan status penerima beasiswa dan gender
fig11 = px.histogram(df, x='Scholarship_holder', color='Gender', barmode='stack', title='Distribusi Mahasiswa Berdasarkan Status Penerima Beasiswa dan Gender')
fig11.show()

# 12. Korelasi antara jumlah mata kuliah yang diambil pada semester pertama dengan nilai mata kuliah pada semester pertama (Heatmap)
heatmap_data = df[['Curricular_units_1st_sem_enrolled', 'Curricular_units_1st_sem_grade']].corr()
fig12 = px.imshow(heatmap_data, text_auto=True, title='Korelasi Jumlah Mata Kuliah dan Nilai Mata Kuliah pada Semester Pertama')
fig12.show()

# 13. Distribusi mahasiswa berdasarkan status pembayaran biaya kuliah dan status mahasiswa
fig13 = px.histogram(df, x='Tuition_fees_up_to_date', color='Status', barmode='group', title='Distribusi Mahasiswa Berdasarkan Status Pembayaran Biaya Kuliah dan Status Mahasiswa')
fig13.show()

"""## Modeling

1. Seleksi Fitur
Hanya memilih fitur relevan, seperti:
- Marital Status
- Age at Enrollment
- Admission Grade

2. Preprocessing
- Mengubah data kategori menjadi angka menggunakan LabelEncoder.
- Menstandarisasi fitur numerik dengan StandardScaler.

3. Pelatihan Model
- Model yang digunakan:
Random Forest Classifier, dengan data dibagi menjadi data pelatihan dan pengujian.
"""

# Load the processed data
df = pd.read_csv('dataset/processed_data.csv')

# Select features for modeling
features_to_use = [
    'Marital_status',
    'Age_at_enrollment',
    'Admission_grade',
    'Curricular_units_1st_sem_enrolled',
    'Gender'
]

# Prepare the target variable
target_variable = 'Status'

# Create a copy of the dataframe with selected features
model_df = df[features_to_use + [target_variable]].copy()

# Handle categorical variables
# Encode categorical features
le_marital = LabelEncoder()
le_gender = LabelEncoder()
le_status = LabelEncoder()

model_df['Marital_status_encoded'] = le_marital.fit_transform(model_df['Marital_status'])
model_df['Gender_encoded'] = le_gender.fit_transform(model_df['Gender'])
model_df['Status_encoded'] = le_status.fit_transform(model_df[target_variable])

# Prepare features and target
X = model_df[['Marital_status_encoded', 'Age_at_enrollment', 'Admission_grade',
              'Curricular_units_1st_sem_enrolled', 'Gender_encoded']]
y = model_df['Status_encoded']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Random Forest Classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train_scaled, y_train)

"""## Evaluation
Mengukur kinerja model dengan:
- Classification Report: Menampilkan metrik seperti precision, recall, dan F1-score.
- Confusion Matrix: Mengukur prediksi benar dan salah.
- Akurasi Model: Menghitung performa keseluruhan.
"""

# Evaluate the model
y_pred = rf_classifier.predict(X_test_scaled)

# Print classification report
print("Classification Report:")
print(classification_report(y_test, y_pred,
                             target_names=le_status.classes_))

# Print confusion matrix
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Print Accuracy
accuracy = (y_pred == y_test).mean()
print(f"\nAccuracy: {accuracy:.2f}")

"""## Save Model
Model yang telah dilatih disimpan dalam format .pkl untuk digunakan kembali tanpa harus melatih ulang.
"""

# Save the model and related objects
joblib.dump({
    'model': rf_classifier,
    'scaler': scaler,
    'label_encoders': {
        'marital_status': le_marital,
        'gender': le_gender,
        'status': le_status
    },
    'feature_names': X.columns.tolist()
}, 'model.pkl')

"""## Prediksi
Menyediakan fungsi untuk prediksi status mahasiswa baru berdasarkan input data:
- Status perkawinan
- Usia
- Nilai penerimaan
- Gender
- Mata kuliah semester pertama.
"""

# Function to make predictions
def predict_student_status(marital_status, age, admission_grade,
                            curricular_units_enrolled, gender):
    # Load the saved model and related objects
    model_data = joblib.load('model.pkl')

    # Prepare the input data
    input_data = pd.DataFrame({
        'Marital_status': [marital_status],
        'Age_at_enrollment': [age],
        'Admission_grade': [admission_grade],
        'Curricular_units_1st_sem_enrolled': [curricular_units_enrolled],
        'Gender': [gender]
    })

    # Encode categorical variables
    input_data['Marital_status_encoded'] = model_data['label_encoders']['marital_status'].transform(input_data['Marital_status'])
    input_data['Gender_encoded'] = model_data['label_encoders']['gender'].transform(input_data['Gender'])

    # Select and scale features
    X_input = input_data[model_data['feature_names']]
    X_input_scaled = model_data['scaler'].transform(X_input)

    # Make prediction
    prediction_encoded = model_data['model'].predict(X_input_scaled)

    # Decode the prediction
    prediction = model_data['label_encoders']['status'].inverse_transform(prediction_encoded)

    return prediction[0]

# Example usage
print("\nExample Prediction:")
example_prediction = predict_student_status(
    marital_status='single',
    age=20,
    admission_grade=14.5,
    curricular_units_enrolled=6,
    gender='male'
)
print("Predicted Student Status:", example_prediction)